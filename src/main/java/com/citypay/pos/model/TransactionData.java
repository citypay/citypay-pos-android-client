/**
 * CityPay POS API
 * CityPay Point of Sale API for payment with card present devices including EMV readers and contactless POS readers.  The API is available from https://github.com/citypay/citypay-pos-api  The API makes it simple to add EMV and contactless card acceptance to iOS, Android, Tablet and desktop applicaitons using a HTTPS protocol. It segregates the complexity of payment processing from the sales environment and eliminates any necessity for the target system to handle card data. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@citypay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.citypay.pos.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class TransactionData {
  
  @SerializedName("additional_data")
  private String additionalData = null;
  @SerializedName("auxiliary_data")
  private String auxiliaryData = null;
  @SerializedName("card_type")
  private String cardType = null;
  @SerializedName("completed_at")
  private String completedAt = null;
  @SerializedName("created_at")
  private String createdAt = null;
  @SerializedName("currency_symbol")
  private String currencySymbol = null;
  @SerializedName("declined_by_card")
  private Boolean declinedByCard = null;
  @SerializedName("emv_app_cryptogram")
  private String emvAppCryptogram = null;
  @SerializedName("emv_app_expiration_date")
  private String emvAppExpirationDate = null;
  @SerializedName("emv_app_txn_counter")
  private Integer emvAppTxnCounter = null;
  @SerializedName("emv_authorized_amount")
  private String emvAuthorizedAmount = null;
  @SerializedName("emv_cardholder_verification_results")
  private String emvCardholderVerificationResults = null;
  @SerializedName("emv_country_code")
  private String emvCountryCode = null;
  @SerializedName("emv_cryptogram_info_data")
  private String emvCryptogramInfoData = null;
  @SerializedName("emv_icc_appid")
  private String emvIccAppid = null;
  @SerializedName("emv_interchange_profile")
  private String emvInterchangeProfile = null;
  @SerializedName("emv_issuer_app_data")
  private String emvIssuerAppData = null;
  @SerializedName("emv_pan_seq_num")
  private String emvPanSeqNum = null;
  @SerializedName("emv_terminal_capabilities")
  private String emvTerminalCapabilities = null;
  @SerializedName("emv_terminal_type")
  private String emvTerminalType = null;
  @SerializedName("emv_terminal_verification_results")
  private String emvTerminalVerificationResults = null;
  @SerializedName("emv_track2_equivalent")
  private String emvTrack2Equivalent = null;
  @SerializedName("emv_txn_currency_code")
  private String emvTxnCurrencyCode = null;
  @SerializedName("emv_txn_date")
  private String emvTxnDate = null;
  @SerializedName("emv_txn_status_info")
  private String emvTxnStatusInfo = null;
  @SerializedName("emv_txn_type")
  private String emvTxnType = null;
  @SerializedName("emv_txn_unpredictable_number")
  private String emvTxnUnpredictableNumber = null;
  @SerializedName("is_commercial_card")
  private String isCommercialCard = null;
  @SerializedName("is_contactless")
  private String isContactless = null;
  @SerializedName("is_fallback")
  private String isFallback = null;
  @SerializedName("is_offline")
  private String isOffline = null;
  @SerializedName("is_voided")
  private String isVoided = null;
  @SerializedName("response_code")
  private String responseCode = null;
  @SerializedName("response_text")
  private String responseText = null;
  @SerializedName("result")
  private String result = null;
  @SerializedName("scheme")
  private String scheme = null;
  @SerializedName("signature_required")
  private String signatureRequired = null;
  @SerializedName("terminal_id")
  private String terminalId = null;
  @SerializedName("total_amount")
  private Integer totalAmount = null;
  @SerializedName("transaction_type")
  private String transactionType = null;
  @SerializedName("verified_by_pin")
  private Boolean verifiedByPin = null;

  /**
   * additional data provided within the acquirer response
   **/
  @ApiModelProperty(value = "additional data provided within the acquirer response")
  public String getAdditionalData() {
    return additionalData;
  }
  public void setAdditionalData(String additionalData) {
    this.additionalData = additionalData;
  }

  /**
   * Value provided by online processing
   **/
  @ApiModelProperty(value = "Value provided by online processing")
  public String getAuxiliaryData() {
    return auxiliaryData;
  }
  public void setAuxiliaryData(String auxiliaryData) {
    this.auxiliaryData = auxiliaryData;
  }

  /**
   * The type of card used such as EMV
   **/
  @ApiModelProperty(value = "The type of card used such as EMV")
  public String getCardType() {
    return cardType;
  }
  public void setCardType(String cardType) {
    this.cardType = cardType;
  }

  /**
   * The date and time that the transaction was completed in ISO-8166 format
   **/
  @ApiModelProperty(value = "The date and time that the transaction was completed in ISO-8166 format")
  public String getCompletedAt() {
    return completedAt;
  }
  public void setCompletedAt(String completedAt) {
    this.completedAt = completedAt;
  }

  /**
   * The date and time that the transaction was created in ISO-8166 format
   **/
  @ApiModelProperty(value = "The date and time that the transaction was created in ISO-8166 format")
  public String getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  /**
   * The currency symbol used
   **/
  @ApiModelProperty(value = "The currency symbol used")
  public String getCurrencySymbol() {
    return currencySymbol;
  }
  public void setCurrencySymbol(String currencySymbol) {
    this.currencySymbol = currencySymbol;
  }

  /**
   * Boolean value should the transaction be declined by the card
   **/
  @ApiModelProperty(value = "Boolean value should the transaction be declined by the card")
  public Boolean getDeclinedByCard() {
    return declinedByCard;
  }
  public void setDeclinedByCard(Boolean declinedByCard) {
    this.declinedByCard = declinedByCard;
  }

  /**
   * Cryptogram used by the card in processing
   **/
  @ApiModelProperty(value = "Cryptogram used by the card in processing")
  public String getEmvAppCryptogram() {
    return emvAppCryptogram;
  }
  public void setEmvAppCryptogram(String emvAppCryptogram) {
    this.emvAppCryptogram = emvAppCryptogram;
  }

  /**
   * Expiry date of the card
   **/
  @ApiModelProperty(value = "Expiry date of the card")
  public String getEmvAppExpirationDate() {
    return emvAppExpirationDate;
  }
  public void setEmvAppExpirationDate(String emvAppExpirationDate) {
    this.emvAppExpirationDate = emvAppExpirationDate;
  }

  /**
   * A transaction counter, incremented by the device resulting in a transaction number
   **/
  @ApiModelProperty(value = "A transaction counter, incremented by the device resulting in a transaction number")
  public Integer getEmvAppTxnCounter() {
    return emvAppTxnCounter;
  }
  public void setEmvAppTxnCounter(Integer emvAppTxnCounter) {
    this.emvAppTxnCounter = emvAppTxnCounter;
  }

  /**
   * The amount authorised
   **/
  @ApiModelProperty(value = "The amount authorised")
  public String getEmvAuthorizedAmount() {
    return emvAuthorizedAmount;
  }
  public void setEmvAuthorizedAmount(String emvAuthorizedAmount) {
    this.emvAuthorizedAmount = emvAuthorizedAmount;
  }

  /**
   * Verification results within the processing scope
   **/
  @ApiModelProperty(value = "Verification results within the processing scope")
  public String getEmvCardholderVerificationResults() {
    return emvCardholderVerificationResults;
  }
  public void setEmvCardholderVerificationResults(String emvCardholderVerificationResults) {
    this.emvCardholderVerificationResults = emvCardholderVerificationResults;
  }

  /**
   * A country code returned by the device
   **/
  @ApiModelProperty(value = "A country code returned by the device")
  public String getEmvCountryCode() {
    return emvCountryCode;
  }
  public void setEmvCountryCode(String emvCountryCode) {
    this.emvCountryCode = emvCountryCode;
  }

  /**
   * Cryptogram info returned by the card
   **/
  @ApiModelProperty(value = "Cryptogram info returned by the card")
  public String getEmvCryptogramInfoData() {
    return emvCryptogramInfoData;
  }
  public void setEmvCryptogramInfoData(String emvCryptogramInfoData) {
    this.emvCryptogramInfoData = emvCryptogramInfoData;
  }

  /**
   * The application id (AID) identifying the card used
   **/
  @ApiModelProperty(value = "The application id (AID) identifying the card used")
  public String getEmvIccAppid() {
    return emvIccAppid;
  }
  public void setEmvIccAppid(String emvIccAppid) {
    this.emvIccAppid = emvIccAppid;
  }

  /**
   * The interchange profile used
   **/
  @ApiModelProperty(value = "The interchange profile used")
  public String getEmvInterchangeProfile() {
    return emvInterchangeProfile;
  }
  public void setEmvInterchangeProfile(String emvInterchangeProfile) {
    this.emvInterchangeProfile = emvInterchangeProfile;
  }

  /**
   * Application data provided by the issuer
   **/
  @ApiModelProperty(value = "Application data provided by the issuer")
  public String getEmvIssuerAppData() {
    return emvIssuerAppData;
  }
  public void setEmvIssuerAppData(String emvIssuerAppData) {
    this.emvIssuerAppData = emvIssuerAppData;
  }

  /**
   * Sequence number provided by the card
   **/
  @ApiModelProperty(value = "Sequence number provided by the card")
  public String getEmvPanSeqNum() {
    return emvPanSeqNum;
  }
  public void setEmvPanSeqNum(String emvPanSeqNum) {
    this.emvPanSeqNum = emvPanSeqNum;
  }

  /**
   * Terminal capabilities of the device
   **/
  @ApiModelProperty(value = "Terminal capabilities of the device")
  public String getEmvTerminalCapabilities() {
    return emvTerminalCapabilities;
  }
  public void setEmvTerminalCapabilities(String emvTerminalCapabilities) {
    this.emvTerminalCapabilities = emvTerminalCapabilities;
  }

  /**
   * The terminal type of the device
   **/
  @ApiModelProperty(value = "The terminal type of the device")
  public String getEmvTerminalType() {
    return emvTerminalType;
  }
  public void setEmvTerminalType(String emvTerminalType) {
    this.emvTerminalType = emvTerminalType;
  }

  /**
   * TVR provided by the verification process of the transaction
   **/
  @ApiModelProperty(value = "TVR provided by the verification process of the transaction")
  public String getEmvTerminalVerificationResults() {
    return emvTerminalVerificationResults;
  }
  public void setEmvTerminalVerificationResults(String emvTerminalVerificationResults) {
    this.emvTerminalVerificationResults = emvTerminalVerificationResults;
  }

  /**
   * A masked version of the card number
   **/
  @ApiModelProperty(value = "A masked version of the card number")
  public String getEmvTrack2Equivalent() {
    return emvTrack2Equivalent;
  }
  public void setEmvTrack2Equivalent(String emvTrack2Equivalent) {
    this.emvTrack2Equivalent = emvTrack2Equivalent;
  }

  /**
   * ISO currency code of the transaction
   **/
  @ApiModelProperty(value = "ISO currency code of the transaction")
  public String getEmvTxnCurrencyCode() {
    return emvTxnCurrencyCode;
  }
  public void setEmvTxnCurrencyCode(String emvTxnCurrencyCode) {
    this.emvTxnCurrencyCode = emvTxnCurrencyCode;
  }

  /**
   * ISO date of the transaction
   **/
  @ApiModelProperty(value = "ISO date of the transaction")
  public String getEmvTxnDate() {
    return emvTxnDate;
  }
  public void setEmvTxnDate(String emvTxnDate) {
    this.emvTxnDate = emvTxnDate;
  }

  /**
   * Status info of the transaction
   **/
  @ApiModelProperty(value = "Status info of the transaction")
  public String getEmvTxnStatusInfo() {
    return emvTxnStatusInfo;
  }
  public void setEmvTxnStatusInfo(String emvTxnStatusInfo) {
    this.emvTxnStatusInfo = emvTxnStatusInfo;
  }

  /**
   * Transacrtion type information returned
   **/
  @ApiModelProperty(value = "Transacrtion type information returned")
  public String getEmvTxnType() {
    return emvTxnType;
  }
  public void setEmvTxnType(String emvTxnType) {
    this.emvTxnType = emvTxnType;
  }

  /**
   * The UN or unpredicatble number in the transaction process
   **/
  @ApiModelProperty(value = "The UN or unpredicatble number in the transaction process")
  public String getEmvTxnUnpredictableNumber() {
    return emvTxnUnpredictableNumber;
  }
  public void setEmvTxnUnpredictableNumber(String emvTxnUnpredictableNumber) {
    this.emvTxnUnpredictableNumber = emvTxnUnpredictableNumber;
  }

  /**
   * Determines if the card was a commercial card
   **/
  @ApiModelProperty(value = "Determines if the card was a commercial card")
  public String getIsCommercialCard() {
    return isCommercialCard;
  }
  public void setIsCommercialCard(String isCommercialCard) {
    this.isCommercialCard = isCommercialCard;
  }

  /**
   * Determines if the card was contactless
   **/
  @ApiModelProperty(value = "Determines if the card was contactless")
  public String getIsContactless() {
    return isContactless;
  }
  public void setIsContactless(String isContactless) {
    this.isContactless = isContactless;
  }

  /**
   * Determines if fallback was used
   **/
  @ApiModelProperty(value = "Determines if fallback was used")
  public String getIsFallback() {
    return isFallback;
  }
  public void setIsFallback(String isFallback) {
    this.isFallback = isFallback;
  }

  /**
   * Determines if the transaction was authorised offline
   **/
  @ApiModelProperty(value = "Determines if the transaction was authorised offline")
  public String getIsOffline() {
    return isOffline;
  }
  public void setIsOffline(String isOffline) {
    this.isOffline = isOffline;
  }

  /**
   * Determines if the transaction was voided
   **/
  @ApiModelProperty(value = "Determines if the transaction was voided")
  public String getIsVoided() {
    return isVoided;
  }
  public void setIsVoided(String isVoided) {
    this.isVoided = isVoided;
  }

  /**
   * A response code provided by the acquirer
   **/
  @ApiModelProperty(value = "A response code provided by the acquirer")
  public String getResponseCode() {
    return responseCode;
  }
  public void setResponseCode(String responseCode) {
    this.responseCode = responseCode;
  }

  /**
   * The response text returned by the acquirer
   **/
  @ApiModelProperty(value = "The response text returned by the acquirer")
  public String getResponseText() {
    return responseText;
  }
  public void setResponseText(String responseText) {
    this.responseText = responseText;
  }

  /**
   * A text result of the transaction
   **/
  @ApiModelProperty(value = "A text result of the transaction")
  public String getResult() {
    return result;
  }
  public void setResult(String result) {
    this.result = result;
  }

  /**
   * A description of the card scheme for the card
   **/
  @ApiModelProperty(value = "A description of the card scheme for the card")
  public String getScheme() {
    return scheme;
  }
  public void setScheme(String scheme) {
    this.scheme = scheme;
  }

  /**
   * Determines whether a signature was required for legacy systems
   **/
  @ApiModelProperty(value = "Determines whether a signature was required for legacy systems")
  public String getSignatureRequired() {
    return signatureRequired;
  }
  public void setSignatureRequired(String signatureRequired) {
    this.signatureRequired = signatureRequired;
  }

  /**
   * The terminal id used from the device
   **/
  @ApiModelProperty(value = "The terminal id used from the device")
  public String getTerminalId() {
    return terminalId;
  }
  public void setTerminalId(String terminalId) {
    this.terminalId = terminalId;
  }

  /**
   * The total amount processed
   **/
  @ApiModelProperty(value = "The total amount processed")
  public Integer getTotalAmount() {
    return totalAmount;
  }
  public void setTotalAmount(Integer totalAmount) {
    this.totalAmount = totalAmount;
  }

  /**
   * The type of transaction processed
   **/
  @ApiModelProperty(value = "The type of transaction processed")
  public String getTransactionType() {
    return transactionType;
  }
  public void setTransactionType(String transactionType) {
    this.transactionType = transactionType;
  }

  /**
   * Determines if the transaction was verified by pin entry
   **/
  @ApiModelProperty(value = "Determines if the transaction was verified by pin entry")
  public Boolean getVerifiedByPin() {
    return verifiedByPin;
  }
  public void setVerifiedByPin(Boolean verifiedByPin) {
    this.verifiedByPin = verifiedByPin;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionData transactionData = (TransactionData) o;
    return (this.additionalData == null ? transactionData.additionalData == null : this.additionalData.equals(transactionData.additionalData)) &&
        (this.auxiliaryData == null ? transactionData.auxiliaryData == null : this.auxiliaryData.equals(transactionData.auxiliaryData)) &&
        (this.cardType == null ? transactionData.cardType == null : this.cardType.equals(transactionData.cardType)) &&
        (this.completedAt == null ? transactionData.completedAt == null : this.completedAt.equals(transactionData.completedAt)) &&
        (this.createdAt == null ? transactionData.createdAt == null : this.createdAt.equals(transactionData.createdAt)) &&
        (this.currencySymbol == null ? transactionData.currencySymbol == null : this.currencySymbol.equals(transactionData.currencySymbol)) &&
        (this.declinedByCard == null ? transactionData.declinedByCard == null : this.declinedByCard.equals(transactionData.declinedByCard)) &&
        (this.emvAppCryptogram == null ? transactionData.emvAppCryptogram == null : this.emvAppCryptogram.equals(transactionData.emvAppCryptogram)) &&
        (this.emvAppExpirationDate == null ? transactionData.emvAppExpirationDate == null : this.emvAppExpirationDate.equals(transactionData.emvAppExpirationDate)) &&
        (this.emvAppTxnCounter == null ? transactionData.emvAppTxnCounter == null : this.emvAppTxnCounter.equals(transactionData.emvAppTxnCounter)) &&
        (this.emvAuthorizedAmount == null ? transactionData.emvAuthorizedAmount == null : this.emvAuthorizedAmount.equals(transactionData.emvAuthorizedAmount)) &&
        (this.emvCardholderVerificationResults == null ? transactionData.emvCardholderVerificationResults == null : this.emvCardholderVerificationResults.equals(transactionData.emvCardholderVerificationResults)) &&
        (this.emvCountryCode == null ? transactionData.emvCountryCode == null : this.emvCountryCode.equals(transactionData.emvCountryCode)) &&
        (this.emvCryptogramInfoData == null ? transactionData.emvCryptogramInfoData == null : this.emvCryptogramInfoData.equals(transactionData.emvCryptogramInfoData)) &&
        (this.emvIccAppid == null ? transactionData.emvIccAppid == null : this.emvIccAppid.equals(transactionData.emvIccAppid)) &&
        (this.emvInterchangeProfile == null ? transactionData.emvInterchangeProfile == null : this.emvInterchangeProfile.equals(transactionData.emvInterchangeProfile)) &&
        (this.emvIssuerAppData == null ? transactionData.emvIssuerAppData == null : this.emvIssuerAppData.equals(transactionData.emvIssuerAppData)) &&
        (this.emvPanSeqNum == null ? transactionData.emvPanSeqNum == null : this.emvPanSeqNum.equals(transactionData.emvPanSeqNum)) &&
        (this.emvTerminalCapabilities == null ? transactionData.emvTerminalCapabilities == null : this.emvTerminalCapabilities.equals(transactionData.emvTerminalCapabilities)) &&
        (this.emvTerminalType == null ? transactionData.emvTerminalType == null : this.emvTerminalType.equals(transactionData.emvTerminalType)) &&
        (this.emvTerminalVerificationResults == null ? transactionData.emvTerminalVerificationResults == null : this.emvTerminalVerificationResults.equals(transactionData.emvTerminalVerificationResults)) &&
        (this.emvTrack2Equivalent == null ? transactionData.emvTrack2Equivalent == null : this.emvTrack2Equivalent.equals(transactionData.emvTrack2Equivalent)) &&
        (this.emvTxnCurrencyCode == null ? transactionData.emvTxnCurrencyCode == null : this.emvTxnCurrencyCode.equals(transactionData.emvTxnCurrencyCode)) &&
        (this.emvTxnDate == null ? transactionData.emvTxnDate == null : this.emvTxnDate.equals(transactionData.emvTxnDate)) &&
        (this.emvTxnStatusInfo == null ? transactionData.emvTxnStatusInfo == null : this.emvTxnStatusInfo.equals(transactionData.emvTxnStatusInfo)) &&
        (this.emvTxnType == null ? transactionData.emvTxnType == null : this.emvTxnType.equals(transactionData.emvTxnType)) &&
        (this.emvTxnUnpredictableNumber == null ? transactionData.emvTxnUnpredictableNumber == null : this.emvTxnUnpredictableNumber.equals(transactionData.emvTxnUnpredictableNumber)) &&
        (this.isCommercialCard == null ? transactionData.isCommercialCard == null : this.isCommercialCard.equals(transactionData.isCommercialCard)) &&
        (this.isContactless == null ? transactionData.isContactless == null : this.isContactless.equals(transactionData.isContactless)) &&
        (this.isFallback == null ? transactionData.isFallback == null : this.isFallback.equals(transactionData.isFallback)) &&
        (this.isOffline == null ? transactionData.isOffline == null : this.isOffline.equals(transactionData.isOffline)) &&
        (this.isVoided == null ? transactionData.isVoided == null : this.isVoided.equals(transactionData.isVoided)) &&
        (this.responseCode == null ? transactionData.responseCode == null : this.responseCode.equals(transactionData.responseCode)) &&
        (this.responseText == null ? transactionData.responseText == null : this.responseText.equals(transactionData.responseText)) &&
        (this.result == null ? transactionData.result == null : this.result.equals(transactionData.result)) &&
        (this.scheme == null ? transactionData.scheme == null : this.scheme.equals(transactionData.scheme)) &&
        (this.signatureRequired == null ? transactionData.signatureRequired == null : this.signatureRequired.equals(transactionData.signatureRequired)) &&
        (this.terminalId == null ? transactionData.terminalId == null : this.terminalId.equals(transactionData.terminalId)) &&
        (this.totalAmount == null ? transactionData.totalAmount == null : this.totalAmount.equals(transactionData.totalAmount)) &&
        (this.transactionType == null ? transactionData.transactionType == null : this.transactionType.equals(transactionData.transactionType)) &&
        (this.verifiedByPin == null ? transactionData.verifiedByPin == null : this.verifiedByPin.equals(transactionData.verifiedByPin));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.additionalData == null ? 0: this.additionalData.hashCode());
    result = 31 * result + (this.auxiliaryData == null ? 0: this.auxiliaryData.hashCode());
    result = 31 * result + (this.cardType == null ? 0: this.cardType.hashCode());
    result = 31 * result + (this.completedAt == null ? 0: this.completedAt.hashCode());
    result = 31 * result + (this.createdAt == null ? 0: this.createdAt.hashCode());
    result = 31 * result + (this.currencySymbol == null ? 0: this.currencySymbol.hashCode());
    result = 31 * result + (this.declinedByCard == null ? 0: this.declinedByCard.hashCode());
    result = 31 * result + (this.emvAppCryptogram == null ? 0: this.emvAppCryptogram.hashCode());
    result = 31 * result + (this.emvAppExpirationDate == null ? 0: this.emvAppExpirationDate.hashCode());
    result = 31 * result + (this.emvAppTxnCounter == null ? 0: this.emvAppTxnCounter.hashCode());
    result = 31 * result + (this.emvAuthorizedAmount == null ? 0: this.emvAuthorizedAmount.hashCode());
    result = 31 * result + (this.emvCardholderVerificationResults == null ? 0: this.emvCardholderVerificationResults.hashCode());
    result = 31 * result + (this.emvCountryCode == null ? 0: this.emvCountryCode.hashCode());
    result = 31 * result + (this.emvCryptogramInfoData == null ? 0: this.emvCryptogramInfoData.hashCode());
    result = 31 * result + (this.emvIccAppid == null ? 0: this.emvIccAppid.hashCode());
    result = 31 * result + (this.emvInterchangeProfile == null ? 0: this.emvInterchangeProfile.hashCode());
    result = 31 * result + (this.emvIssuerAppData == null ? 0: this.emvIssuerAppData.hashCode());
    result = 31 * result + (this.emvPanSeqNum == null ? 0: this.emvPanSeqNum.hashCode());
    result = 31 * result + (this.emvTerminalCapabilities == null ? 0: this.emvTerminalCapabilities.hashCode());
    result = 31 * result + (this.emvTerminalType == null ? 0: this.emvTerminalType.hashCode());
    result = 31 * result + (this.emvTerminalVerificationResults == null ? 0: this.emvTerminalVerificationResults.hashCode());
    result = 31 * result + (this.emvTrack2Equivalent == null ? 0: this.emvTrack2Equivalent.hashCode());
    result = 31 * result + (this.emvTxnCurrencyCode == null ? 0: this.emvTxnCurrencyCode.hashCode());
    result = 31 * result + (this.emvTxnDate == null ? 0: this.emvTxnDate.hashCode());
    result = 31 * result + (this.emvTxnStatusInfo == null ? 0: this.emvTxnStatusInfo.hashCode());
    result = 31 * result + (this.emvTxnType == null ? 0: this.emvTxnType.hashCode());
    result = 31 * result + (this.emvTxnUnpredictableNumber == null ? 0: this.emvTxnUnpredictableNumber.hashCode());
    result = 31 * result + (this.isCommercialCard == null ? 0: this.isCommercialCard.hashCode());
    result = 31 * result + (this.isContactless == null ? 0: this.isContactless.hashCode());
    result = 31 * result + (this.isFallback == null ? 0: this.isFallback.hashCode());
    result = 31 * result + (this.isOffline == null ? 0: this.isOffline.hashCode());
    result = 31 * result + (this.isVoided == null ? 0: this.isVoided.hashCode());
    result = 31 * result + (this.responseCode == null ? 0: this.responseCode.hashCode());
    result = 31 * result + (this.responseText == null ? 0: this.responseText.hashCode());
    result = 31 * result + (this.result == null ? 0: this.result.hashCode());
    result = 31 * result + (this.scheme == null ? 0: this.scheme.hashCode());
    result = 31 * result + (this.signatureRequired == null ? 0: this.signatureRequired.hashCode());
    result = 31 * result + (this.terminalId == null ? 0: this.terminalId.hashCode());
    result = 31 * result + (this.totalAmount == null ? 0: this.totalAmount.hashCode());
    result = 31 * result + (this.transactionType == null ? 0: this.transactionType.hashCode());
    result = 31 * result + (this.verifiedByPin == null ? 0: this.verifiedByPin.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionData {\n");
    
    sb.append("  additionalData: ").append(additionalData).append("\n");
    sb.append("  auxiliaryData: ").append(auxiliaryData).append("\n");
    sb.append("  cardType: ").append(cardType).append("\n");
    sb.append("  completedAt: ").append(completedAt).append("\n");
    sb.append("  createdAt: ").append(createdAt).append("\n");
    sb.append("  currencySymbol: ").append(currencySymbol).append("\n");
    sb.append("  declinedByCard: ").append(declinedByCard).append("\n");
    sb.append("  emvAppCryptogram: ").append(emvAppCryptogram).append("\n");
    sb.append("  emvAppExpirationDate: ").append(emvAppExpirationDate).append("\n");
    sb.append("  emvAppTxnCounter: ").append(emvAppTxnCounter).append("\n");
    sb.append("  emvAuthorizedAmount: ").append(emvAuthorizedAmount).append("\n");
    sb.append("  emvCardholderVerificationResults: ").append(emvCardholderVerificationResults).append("\n");
    sb.append("  emvCountryCode: ").append(emvCountryCode).append("\n");
    sb.append("  emvCryptogramInfoData: ").append(emvCryptogramInfoData).append("\n");
    sb.append("  emvIccAppid: ").append(emvIccAppid).append("\n");
    sb.append("  emvInterchangeProfile: ").append(emvInterchangeProfile).append("\n");
    sb.append("  emvIssuerAppData: ").append(emvIssuerAppData).append("\n");
    sb.append("  emvPanSeqNum: ").append(emvPanSeqNum).append("\n");
    sb.append("  emvTerminalCapabilities: ").append(emvTerminalCapabilities).append("\n");
    sb.append("  emvTerminalType: ").append(emvTerminalType).append("\n");
    sb.append("  emvTerminalVerificationResults: ").append(emvTerminalVerificationResults).append("\n");
    sb.append("  emvTrack2Equivalent: ").append(emvTrack2Equivalent).append("\n");
    sb.append("  emvTxnCurrencyCode: ").append(emvTxnCurrencyCode).append("\n");
    sb.append("  emvTxnDate: ").append(emvTxnDate).append("\n");
    sb.append("  emvTxnStatusInfo: ").append(emvTxnStatusInfo).append("\n");
    sb.append("  emvTxnType: ").append(emvTxnType).append("\n");
    sb.append("  emvTxnUnpredictableNumber: ").append(emvTxnUnpredictableNumber).append("\n");
    sb.append("  isCommercialCard: ").append(isCommercialCard).append("\n");
    sb.append("  isContactless: ").append(isContactless).append("\n");
    sb.append("  isFallback: ").append(isFallback).append("\n");
    sb.append("  isOffline: ").append(isOffline).append("\n");
    sb.append("  isVoided: ").append(isVoided).append("\n");
    sb.append("  responseCode: ").append(responseCode).append("\n");
    sb.append("  responseText: ").append(responseText).append("\n");
    sb.append("  result: ").append(result).append("\n");
    sb.append("  scheme: ").append(scheme).append("\n");
    sb.append("  signatureRequired: ").append(signatureRequired).append("\n");
    sb.append("  terminalId: ").append(terminalId).append("\n");
    sb.append("  totalAmount: ").append(totalAmount).append("\n");
    sb.append("  transactionType: ").append(transactionType).append("\n");
    sb.append("  verifiedByPin: ").append(verifiedByPin).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
