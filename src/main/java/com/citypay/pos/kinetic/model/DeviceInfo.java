/**
 * Kinetic Smart API
 * Kinetic Smart Swagger Implementatin
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@citypay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.citypay.pos.kinetic.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class DeviceInfo {
  
  @SerializedName("name")
  private String name = null;
  @SerializedName("serialno")
  private String serialno = null;
  @SerializedName("portable")
  private Boolean portable = null;
  @SerializedName("busy")
  private Boolean busy = null;
  @SerializedName("battery_charging")
  private Boolean batteryCharging = null;
  @SerializedName("battery_percentage")
  private Integer batteryPercentage = null;
  @SerializedName("printer")
  private Boolean printer = null;

  /**
   * The name of the device
   **/
  @ApiModelProperty(value = "The name of the device")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * The serial number of the device
   **/
  @ApiModelProperty(value = "The serial number of the device")
  public String getSerialno() {
    return serialno;
  }
  public void setSerialno(String serialno) {
    this.serialno = serialno;
  }

  /**
   * Whether the device is portable
   **/
  @ApiModelProperty(value = "Whether the device is portable")
  public Boolean getPortable() {
    return portable;
  }
  public void setPortable(Boolean portable) {
    this.portable = portable;
  }

  /**
   * Whether the device is busy or available for a transaction
   **/
  @ApiModelProperty(value = "Whether the device is busy or available for a transaction")
  public Boolean getBusy() {
    return busy;
  }
  public void setBusy(Boolean busy) {
    this.busy = busy;
  }

  /**
   * Whether the device is currently charging
   **/
  @ApiModelProperty(value = "Whether the device is currently charging")
  public Boolean getBatteryCharging() {
    return batteryCharging;
  }
  public void setBatteryCharging(Boolean batteryCharging) {
    this.batteryCharging = batteryCharging;
  }

  /**
   * A percentage value of the battery
   **/
  @ApiModelProperty(value = "A percentage value of the battery")
  public Integer getBatteryPercentage() {
    return batteryPercentage;
  }
  public void setBatteryPercentage(Integer batteryPercentage) {
    this.batteryPercentage = batteryPercentage;
  }

  /**
   * Whether the device has a printer
   **/
  @ApiModelProperty(value = "Whether the device has a printer")
  public Boolean getPrinter() {
    return printer;
  }
  public void setPrinter(Boolean printer) {
    this.printer = printer;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceInfo deviceInfo = (DeviceInfo) o;
    return (this.name == null ? deviceInfo.name == null : this.name.equals(deviceInfo.name)) &&
        (this.serialno == null ? deviceInfo.serialno == null : this.serialno.equals(deviceInfo.serialno)) &&
        (this.portable == null ? deviceInfo.portable == null : this.portable.equals(deviceInfo.portable)) &&
        (this.busy == null ? deviceInfo.busy == null : this.busy.equals(deviceInfo.busy)) &&
        (this.batteryCharging == null ? deviceInfo.batteryCharging == null : this.batteryCharging.equals(deviceInfo.batteryCharging)) &&
        (this.batteryPercentage == null ? deviceInfo.batteryPercentage == null : this.batteryPercentage.equals(deviceInfo.batteryPercentage)) &&
        (this.printer == null ? deviceInfo.printer == null : this.printer.equals(deviceInfo.printer));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.serialno == null ? 0: this.serialno.hashCode());
    result = 31 * result + (this.portable == null ? 0: this.portable.hashCode());
    result = 31 * result + (this.busy == null ? 0: this.busy.hashCode());
    result = 31 * result + (this.batteryCharging == null ? 0: this.batteryCharging.hashCode());
    result = 31 * result + (this.batteryPercentage == null ? 0: this.batteryPercentage.hashCode());
    result = 31 * result + (this.printer == null ? 0: this.printer.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceInfo {\n");
    
    sb.append("  name: ").append(name).append("\n");
    sb.append("  serialno: ").append(serialno).append("\n");
    sb.append("  portable: ").append(portable).append("\n");
    sb.append("  busy: ").append(busy).append("\n");
    sb.append("  batteryCharging: ").append(batteryCharging).append("\n");
    sb.append("  batteryPercentage: ").append(batteryPercentage).append("\n");
    sb.append("  printer: ").append(printer).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
